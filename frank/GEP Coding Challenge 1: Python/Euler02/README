Program:        euler02.py
Goal:           Solve Euler challenge 02
                https://projecteuler.net/problem=2
Author:         Frank G.M. Nijssen
Team:           ING â€“ Tech GEP Ops Eng IT4IT / ServiceNow LCM
Euler ID:       fgmni
Date created:   11 July 2020
Description Euler challenge 02:
                Even Fibonacci numbers
                Problem 2
                Each new term in the Fibonacci sequence is generated by adding the previous two terms.
                By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
                By considering the terms in the Fibonacci sequence whose values do not exceed four million,
                find the sum of the even-valued terms.
Result:         Answer: 4613732
                Completed on Fri, 5 Jun 2020, 08:30
IDE used:       IntelliJ IDEA 2020.1
Input:          -
Output:         4613732
                Process finished with exit code 0

-------------------------------------------------------------------------------------------------------------------


Explanation of Fibonacci sequence
---------------------------------
    [Fibonacci number - From Wikipedia, the free encyclopedia]
    A tiling with squares whose side lengths are successive Fibonacci numbers: 1, 1, 2, 3, 5, 8, 13 and 21.
    In mathematics, the Fibonacci numbers, commonly denoted Fn, form a sequence, called the Fibonacci sequence,
    such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,
    F(0)=0, F(1)=1,
    and
    F(n) = F(n-1) + F(n-2)
    for n > 1.
    The beginning of the sequence is thus:
    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
    In some older books, the value F(0) = 0 is omitted, so that the sequence starts with
    F(1) = F(2) = 1,
    and the recurrence
    F(n) = F(n-1) + F(n-2)
    is valid for n > 2.
    The Fibonacci spiral: an approximation of the golden spiral created by drawing circular arcs connecting
    the opposite corners of squares in the Fibonacci tiling
    Fibonacci numbers are strongly related to the golden ratio:
    Binet's formula expresses the nth Fibonacci number in terms of n and the golden ratio,
    and implies that the ratio of two consecutive Fibonacci numbers tends to the golden ratio as n increases.


Explanation of the global parameters
------------------------------------
- fib_euler:        integer value to set the maximum value of the sum of the even-valued terms
- show_exec_time:   set this parameter to true if you would like to determine execution time
- run_test:         set to true if you would like to run the test cases
- time_start:       if run_test is set to True, time_start will store the starting time of the execution


Explanation of function calc_fib_sum
------------------------------------
Goal
    determines the terms of a Fibonacci sequence until
    the sum of the even terms is equal to or exceeds the value of fib_max.
Input
    - parameter fib_max holds the value of the limit: the sum of even terms must be lower than this value
Returns
    The total of all the even Fibonacci terms add together


Explanation of function test
----------------------------
Goal
    Runs predefined tests, test data are stored in tuple test_values
    Compares a calculated value with an expected value
    In essence it tests function calc_fib_sum.
Input
    - parameter fib_max is the max value for the the sum of the even terms,
        same as fib_max in function calc_fib_sum
    - parameter expected_nbr: represents the number that the calculation should produce as a result
        (return value from calc_fib_sum)
Output
    Prints output in the format
    - Expected output: <expected-number>
    - Calculated output: <calculated-number>
    <Result>
    If <expected-number> is equal to <calculated-number>
        then <result> = "Successful completion"
        else <result> = "Failed: Calculated output <calculated-number> not equal to expected output <expected-number>"
Returns
    -
Remark
    You can use the assert instruction by uncommenting the line
    # assert s == expected_nbr, 'Result should be ' + str( expected_nbr )
    and commenting the print instructions.
    Using assert will throw an AssertionError on a fail,
    and cause the program execution to stop immediately.


Output program
--------------
    When successfully executed with the default values, the output of this program
    (tests and execution time output excluded) will be:
        Solution Euler problem 02: 4613732
        Process finished with exit code 0
